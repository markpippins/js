{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/js/filezilla_clone_with_angular_and_electron/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _staticBlock;\nimport * as i0 from \"@angular/core\";\nexport class ElectronService {\n  constructor() {\n    // Mock data for demo purposes\n    this.mockLocalFiles = [{\n      name: 'Documents',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-15')\n    }, {\n      name: 'Pictures',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-10')\n    }, {\n      name: 'Downloads',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-20')\n    }, {\n      name: 'resume.pdf',\n      isDirectory: false,\n      size: 245760,\n      modified: new Date('2024-01-18')\n    }, {\n      name: 'project.zip',\n      isDirectory: false,\n      size: 1048576,\n      modified: new Date('2024-01-22')\n    }, {\n      name: 'photo.jpg',\n      isDirectory: false,\n      size: 2097152,\n      modified: new Date('2024-01-16')\n    }];\n    this.mockRemoteFiles = [{\n      name: 'public_html',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-12')\n    }, {\n      name: 'logs',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-14')\n    }, {\n      name: 'backup',\n      isDirectory: true,\n      size: 0,\n      modified: new Date('2024-01-08')\n    }, {\n      name: 'index.html',\n      isDirectory: false,\n      size: 4096,\n      modified: new Date('2024-01-19')\n    }, {\n      name: 'style.css',\n      isDirectory: false,\n      size: 8192,\n      modified: new Date('2024-01-17')\n    }, {\n      name: 'script.js',\n      isDirectory: false,\n      size: 12288,\n      modified: new Date('2024-01-21')\n    }];\n    if (this.isElectron) {\n      this.ipc = window.require('electron').ipcRenderer;\n    }\n  }\n  get isElectron() {\n    return !!(window && window.process && window.process.type);\n  }\n  // Local file operations (mocked for demo)\n  getLocalFiles(path) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.isElectron) {\n        return _this.ipc.invoke('get-local-files', path);\n      }\n      return Promise.resolve([..._this.mockLocalFiles]);\n    })();\n  }\n  createLocalDirectory(path, name) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.isElectron) {\n        return _this2.ipc.invoke('create-local-directory', path, name);\n      }\n      _this2.mockLocalFiles.push({\n        name,\n        isDirectory: true,\n        size: 0,\n        modified: new Date()\n      });\n      return Promise.resolve(true);\n    })();\n  }\n  deleteLocalFile(path) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.isElectron) {\n        return _this3.ipc.invoke('delete-local-file', path);\n      }\n      const fileName = path.split('/').pop() || '';\n      const index = _this3.mockLocalFiles.findIndex(f => f.name === fileName);\n      if (index > -1) {\n        _this3.mockLocalFiles.splice(index, 1);\n      }\n      return Promise.resolve(true);\n    })();\n  }\n  renameLocalFile(oldPath, newPath) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isElectron) {\n        return _this4.ipc.invoke('rename-local-file', oldPath, newPath);\n      }\n      const oldName = oldPath.split('/').pop() || '';\n      const newName = newPath.split('/').pop() || '';\n      const file = _this4.mockLocalFiles.find(f => f.name === oldName);\n      if (file) {\n        file.name = newName;\n      }\n      return Promise.resolve(true);\n    })();\n  }\n  selectDirectory() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.isElectron) {\n        return _this5.ipc.invoke('select-directory');\n      }\n      return Promise.resolve('/home/user');\n    })();\n  }\n  // Remote connection operations (mocked for demo)\n  connectSftp(config) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (_this6.isElectron) {\n        return _this6.ipc.invoke('connect-sftp', config);\n      }\n      return Promise.resolve({\n        success: true,\n        message: `Connected to ${config.host} via SFTP (Demo Mode)`\n      });\n    })();\n  }\n  connectFtp(config) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (_this7.isElectron) {\n        return _this7.ipc.invoke('connect-ftp', config);\n      }\n      return Promise.resolve({\n        success: true,\n        message: `Connected to ${config.host} via FTP (Demo Mode)`\n      });\n    })();\n  }\n  getRemoteFiles(path, protocol) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (_this8.isElectron) {\n        return _this8.ipc.invoke('get-remote-files', path, protocol);\n      }\n      return Promise.resolve([..._this8.mockRemoteFiles]);\n    })();\n  }\n  uploadFile(localPath, remotePath, protocol) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      if (_this9.isElectron) {\n        return _this9.ipc.invoke('upload-file', localPath, remotePath, protocol);\n      }\n      const fileName = localPath.split('/').pop() || '';\n      const localFile = _this9.mockLocalFiles.find(f => f.name === fileName);\n      if (localFile && !_this9.mockRemoteFiles.find(f => f.name === fileName)) {\n        _this9.mockRemoteFiles.push({\n          name: fileName,\n          isDirectory: localFile.isDirectory,\n          size: localFile.size,\n          modified: new Date()\n        });\n      }\n      return Promise.resolve(true);\n    })();\n  }\n  downloadFile(remotePath, localPath, protocol) {\n    var _this0 = this;\n    return _asyncToGenerator(function* () {\n      if (_this0.isElectron) {\n        return _this0.ipc.invoke('download-file', remotePath, localPath, protocol);\n      }\n      const fileName = remotePath.split('/').pop() || '';\n      const remoteFile = _this0.mockRemoteFiles.find(f => f.name === fileName);\n      if (remoteFile && !_this0.mockLocalFiles.find(f => f.name === fileName)) {\n        _this0.mockLocalFiles.push({\n          name: fileName,\n          isDirectory: remoteFile.isDirectory,\n          size: remoteFile.size,\n          modified: new Date()\n        });\n      }\n      return Promise.resolve(true);\n    })();\n  }\n  disconnect() {\n    var _this1 = this;\n    return _asyncToGenerator(function* () {\n      if (_this1.isElectron) {\n        return _this1.ipc.invoke('disconnect');\n      }\n      return Promise.resolve(true);\n    })();\n  }\n  static #_ = _staticBlock = () => (this.ɵfac = function ElectronService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ElectronService)();\n  }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ElectronService,\n    factory: ElectronService.ɵfac,\n    providedIn: 'root'\n  }));\n}\n_staticBlock();","map":{"version":3,"names":["ElectronService","constructor","mockLocalFiles","name","isDirectory","size","modified","Date","mockRemoteFiles","isElectron","ipc","window","require","ipcRenderer","process","type","getLocalFiles","path","_this","_asyncToGenerator","invoke","Promise","resolve","createLocalDirectory","_this2","push","deleteLocalFile","_this3","fileName","split","pop","index","findIndex","f","splice","renameLocalFile","oldPath","newPath","_this4","oldName","newName","file","find","selectDirectory","_this5","connectSftp","config","_this6","success","message","host","connectFtp","_this7","getRemoteFiles","protocol","_this8","uploadFile","localPath","remotePath","_this9","localFile","downloadFile","_this0","remoteFile","disconnect","_this1","_","_staticBlock","factory","ɵfac","providedIn"],"sources":["C:\\dev\\js\\filezilla_clone_with_angular_and_electron\\src\\app\\services\\electron.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ndeclare global {\n  interface Window {\n    require: any;\n    process: any;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ElectronService {\n  private ipc: any;\n\n  // Mock data for demo purposes\n  private mockLocalFiles = [\n    { name: 'Documents', isDirectory: true, size: 0, modified: new Date('2024-01-15') },\n    { name: 'Pictures', isDirectory: true, size: 0, modified: new Date('2024-01-10') },\n    { name: 'Downloads', isDirectory: true, size: 0, modified: new Date('2024-01-20') },\n    { name: 'resume.pdf', isDirectory: false, size: 245760, modified: new Date('2024-01-18') },\n    { name: 'project.zip', isDirectory: false, size: 1048576, modified: new Date('2024-01-22') },\n    { name: 'photo.jpg', isDirectory: false, size: 2097152, modified: new Date('2024-01-16') }\n  ];\n\n  private mockRemoteFiles = [\n    { name: 'public_html', isDirectory: true, size: 0, modified: new Date('2024-01-12') },\n    { name: 'logs', isDirectory: true, size: 0, modified: new Date('2024-01-14') },\n    { name: 'backup', isDirectory: true, size: 0, modified: new Date('2024-01-08') },\n    { name: 'index.html', isDirectory: false, size: 4096, modified: new Date('2024-01-19') },\n    { name: 'style.css', isDirectory: false, size: 8192, modified: new Date('2024-01-17') },\n    { name: 'script.js', isDirectory: false, size: 12288, modified: new Date('2024-01-21') }\n  ];\n\n  constructor() {\n    if (this.isElectron) {\n      this.ipc = window.require('electron').ipcRenderer;\n    }\n  }\n\n  get isElectron(): boolean {\n    return !!(window && window.process && window.process.type);\n  }\n\n  // Local file operations (mocked for demo)\n  async getLocalFiles(path: string): Promise<any[]> {\n    if (this.isElectron) {\n      return this.ipc.invoke('get-local-files', path);\n    }\n    return Promise.resolve([...this.mockLocalFiles]);\n  }\n\n  async createLocalDirectory(path: string, name: string): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('create-local-directory', path, name);\n    }\n    this.mockLocalFiles.push({\n      name,\n      isDirectory: true,\n      size: 0,\n      modified: new Date()\n    });\n    return Promise.resolve(true);\n  }\n\n  async deleteLocalFile(path: string): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('delete-local-file', path);\n    }\n    const fileName = path.split('/').pop() || '';\n    const index = this.mockLocalFiles.findIndex(f => f.name === fileName);\n    if (index > -1) {\n      this.mockLocalFiles.splice(index, 1);\n    }\n    return Promise.resolve(true);\n  }\n\n  async renameLocalFile(oldPath: string, newPath: string): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('rename-local-file', oldPath, newPath);\n    }\n    const oldName = oldPath.split('/').pop() || '';\n    const newName = newPath.split('/').pop() || '';\n    const file = this.mockLocalFiles.find(f => f.name === oldName);\n    if (file) {\n      file.name = newName;\n    }\n    return Promise.resolve(true);\n  }\n\n  async selectDirectory(): Promise<string | null> {\n    if (this.isElectron) {\n      return this.ipc.invoke('select-directory');\n    }\n    return Promise.resolve('/home/user');\n  }\n\n  // Remote connection operations (mocked for demo)\n  async connectSftp(config: any): Promise<any> {\n    if (this.isElectron) {\n      return this.ipc.invoke('connect-sftp', config);\n    }\n    return Promise.resolve({ \n      success: true, \n      message: `Connected to ${config.host} via SFTP (Demo Mode)` \n    });\n  }\n\n  async connectFtp(config: any): Promise<any> {\n    if (this.isElectron) {\n      return this.ipc.invoke('connect-ftp', config);\n    }\n    return Promise.resolve({ \n      success: true, \n      message: `Connected to ${config.host} via FTP (Demo Mode)` \n    });\n  }\n\n  async getRemoteFiles(path: string, protocol: string): Promise<any[]> {\n    if (this.isElectron) {\n      return this.ipc.invoke('get-remote-files', path, protocol);\n    }\n    return Promise.resolve([...this.mockRemoteFiles]);\n  }\n\n  async uploadFile(localPath: string, remotePath: string, protocol: string): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('upload-file', localPath, remotePath, protocol);\n    }\n    const fileName = localPath.split('/').pop() || '';\n    const localFile = this.mockLocalFiles.find(f => f.name === fileName);\n    if (localFile && !this.mockRemoteFiles.find(f => f.name === fileName)) {\n      this.mockRemoteFiles.push({\n        name: fileName,\n        isDirectory: localFile.isDirectory,\n        size: localFile.size,\n        modified: new Date()\n      });\n    }\n    return Promise.resolve(true);\n  }\n\n  async downloadFile(remotePath: string, localPath: string, protocol: string): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('download-file', remotePath, localPath, protocol);\n    }\n    const fileName = remotePath.split('/').pop() || '';\n    const remoteFile = this.mockRemoteFiles.find(f => f.name === fileName);\n    if (remoteFile && !this.mockLocalFiles.find(f => f.name === fileName)) {\n      this.mockLocalFiles.push({\n        name: fileName,\n        isDirectory: remoteFile.isDirectory,\n        size: remoteFile.size,\n        modified: new Date()\n      });\n    }\n    return Promise.resolve(true);\n  }\n\n  async disconnect(): Promise<boolean> {\n    if (this.isElectron) {\n      return this.ipc.invoke('disconnect');\n    }\n    return Promise.resolve(true);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}