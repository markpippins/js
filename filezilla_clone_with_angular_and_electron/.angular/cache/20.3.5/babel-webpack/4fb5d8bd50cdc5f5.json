{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/js/filezilla_clone_with_angular_and_electron/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let ElectronService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class ElectronService {\n    constructor() {\n      // Mock data for demo purposes\n      this.mockLocalFiles = [{\n        name: 'Documents',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-15')\n      }, {\n        name: 'Pictures',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-10')\n      }, {\n        name: 'Downloads',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-20')\n      }, {\n        name: 'resume.pdf',\n        isDirectory: false,\n        size: 245760,\n        modified: new Date('2024-01-18')\n      }, {\n        name: 'project.zip',\n        isDirectory: false,\n        size: 1048576,\n        modified: new Date('2024-01-22')\n      }, {\n        name: 'photo.jpg',\n        isDirectory: false,\n        size: 2097152,\n        modified: new Date('2024-01-16')\n      }];\n      this.mockRemoteFiles = [{\n        name: 'public_html',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-12')\n      }, {\n        name: 'logs',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-14')\n      }, {\n        name: 'backup',\n        isDirectory: true,\n        size: 0,\n        modified: new Date('2024-01-08')\n      }, {\n        name: 'index.html',\n        isDirectory: false,\n        size: 4096,\n        modified: new Date('2024-01-19')\n      }, {\n        name: 'style.css',\n        isDirectory: false,\n        size: 8192,\n        modified: new Date('2024-01-17')\n      }, {\n        name: 'script.js',\n        isDirectory: false,\n        size: 12288,\n        modified: new Date('2024-01-21')\n      }];\n      if (this.isElectron) {\n        this.ipc = window.require('electron').ipcRenderer;\n      }\n    }\n    get isElectron() {\n      return !!(window && window.process && window.process.type);\n    }\n    // Local file operations (mocked for demo)\n    getLocalFiles(path) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.isElectron) {\n          return _this.ipc.invoke('get-local-files', path);\n        }\n        return Promise.resolve([..._this.mockLocalFiles]);\n      })();\n    }\n    createLocalDirectory(path, name) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.isElectron) {\n          return _this2.ipc.invoke('create-local-directory', path, name);\n        }\n        _this2.mockLocalFiles.push({\n          name,\n          isDirectory: true,\n          size: 0,\n          modified: new Date()\n        });\n        return Promise.resolve(true);\n      })();\n    }\n    deleteLocalFile(path) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (_this3.isElectron) {\n          return _this3.ipc.invoke('delete-local-file', path);\n        }\n        const fileName = path.split('/').pop() || '';\n        const index = _this3.mockLocalFiles.findIndex(f => f.name === fileName);\n        if (index > -1) {\n          _this3.mockLocalFiles.splice(index, 1);\n        }\n        return Promise.resolve(true);\n      })();\n    }\n    renameLocalFile(oldPath, newPath) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        if (_this4.isElectron) {\n          return _this4.ipc.invoke('rename-local-file', oldPath, newPath);\n        }\n        const oldName = oldPath.split('/').pop() || '';\n        const newName = newPath.split('/').pop() || '';\n        const file = _this4.mockLocalFiles.find(f => f.name === oldName);\n        if (file) {\n          file.name = newName;\n        }\n        return Promise.resolve(true);\n      })();\n    }\n    selectDirectory() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        if (_this5.isElectron) {\n          return _this5.ipc.invoke('select-directory');\n        }\n        return Promise.resolve('/home/user');\n      })();\n    }\n    // Remote connection operations (mocked for demo)\n    connectSftp(config) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        if (_this6.isElectron) {\n          return _this6.ipc.invoke('connect-sftp', config);\n        }\n        return Promise.resolve({\n          success: true,\n          message: `Connected to ${config.host} via SFTP (Demo Mode)`\n        });\n      })();\n    }\n    connectFtp(config) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        if (_this7.isElectron) {\n          return _this7.ipc.invoke('connect-ftp', config);\n        }\n        return Promise.resolve({\n          success: true,\n          message: `Connected to ${config.host} via FTP (Demo Mode)`\n        });\n      })();\n    }\n    getRemoteFiles(path, protocol) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        if (_this8.isElectron) {\n          return _this8.ipc.invoke('get-remote-files', path, protocol);\n        }\n        return Promise.resolve([..._this8.mockRemoteFiles]);\n      })();\n    }\n    uploadFile(localPath, remotePath, protocol) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        if (_this9.isElectron) {\n          return _this9.ipc.invoke('upload-file', localPath, remotePath, protocol);\n        }\n        const fileName = localPath.split('/').pop() || '';\n        const localFile = _this9.mockLocalFiles.find(f => f.name === fileName);\n        if (localFile && !_this9.mockRemoteFiles.find(f => f.name === fileName)) {\n          _this9.mockRemoteFiles.push({\n            name: fileName,\n            isDirectory: localFile.isDirectory,\n            size: localFile.size,\n            modified: new Date()\n          });\n        }\n        return Promise.resolve(true);\n      })();\n    }\n    downloadFile(remotePath, localPath, protocol) {\n      var _this0 = this;\n      return _asyncToGenerator(function* () {\n        if (_this0.isElectron) {\n          return _this0.ipc.invoke('download-file', remotePath, localPath, protocol);\n        }\n        const fileName = remotePath.split('/').pop() || '';\n        const remoteFile = _this0.mockRemoteFiles.find(f => f.name === fileName);\n        if (remoteFile && !_this0.mockLocalFiles.find(f => f.name === fileName)) {\n          _this0.mockLocalFiles.push({\n            name: fileName,\n            isDirectory: remoteFile.isDirectory,\n            size: remoteFile.size,\n            modified: new Date()\n          });\n        }\n        return Promise.resolve(true);\n      })();\n    }\n    disconnect() {\n      var _this1 = this;\n      return _asyncToGenerator(function* () {\n        if (_this1.isElectron) {\n          return _this1.ipc.invoke('disconnect');\n        }\n        return Promise.resolve(true);\n      })();\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function ElectronService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ElectronService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ElectronService,\n      factory: ElectronService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return ElectronService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}