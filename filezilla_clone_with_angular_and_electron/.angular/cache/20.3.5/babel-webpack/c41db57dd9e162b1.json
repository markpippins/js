{"ast":null,"code":"/**\n * @license Angular v20.3.4\n * (c) 2010-2025 Google LLC. https://angular.dev/\n * License: MIT\n */\n\nimport { SIGNAL, consumerMarkDirty, REACTIVE_NODE, consumerDestroy, isInNotificationPhase, consumerPollProducersForChange, consumerBeforeComputation, consumerAfterComputation } from '../signal.mjs';\nexport { SIGNAL_NODE, createComputed, createSignal, defaultEquals, finalizeConsumerAfterComputation, getActiveConsumer, isReactive, producerAccessed, producerIncrementEpoch, producerMarkClean, producerNotifyConsumers, producerUpdateValueVersion, producerUpdatesAllowed, resetConsumerBeforeComputation, runPostProducerCreatedFn, runPostSignalSetFn, setActiveConsumer, setPostProducerCreatedFn, setPostSignalSetFn, setThrowInvalidWriteToSignalError, signalGetFn, signalSetFn, signalUpdateFn } from '../signal.mjs';\nexport { BASE_EFFECT_NODE, createLinkedSignal, linkedSignalSetFn, linkedSignalUpdateFn, runEffect, untracked } from '../effect.mjs';\nexport { setAlternateWeakRefImpl } from '../weak_ref.mjs';\n\n/**\n * A custom formatter which renders signals in an easy-to-read format.\n *\n * @see https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html\n */\nconst formatter = {\n  /**\n   *  If the function returns `null`, the formatter is not used for this reference\n   */\n  header: (sig, config) => {\n    if (!isSignal(sig) || config?.ngSkipFormatting) return null;\n    let value;\n    try {\n      value = sig();\n    } catch {\n      // In case the signl throws, we don't want to break the formatting.\n      return ['span', 'Signal(⚠️ Error)'];\n    }\n    const kind = 'computation' in sig[SIGNAL] ? 'Computed' : 'Signal';\n    const isPrimitive = value === null || !Array.isArray(value) && typeof value !== 'object';\n    return ['span', {}, ['span', {}, `${kind}(`], (() => {\n      if (isSignal(value)) {\n        // Recursively call formatter. Could return an `object` to call the formatter through DevTools,\n        // but then recursive signals will render multiple expando arrows which is an awkward UX.\n        return formatter.header(value, config);\n      } else if (isPrimitive && value !== undefined && typeof value !== 'function') {\n        // Use built-in rendering for primitives which applies standard syntax highlighting / theming.\n        // Can't do this for `undefined` however, as the browser thinks we forgot to provide an object.\n        // Also don't want to do this for functions which render nested expando arrows.\n        return ['object', {\n          object: value\n        }];\n      } else {\n        return prettifyPreview(value);\n      }\n    })(), ['span', {}, `)`]];\n  },\n  hasBody: (sig, config) => {\n    if (!isSignal(sig)) return false;\n    try {\n      sig();\n    } catch {\n      return false;\n    }\n    return !config?.ngSkipFormatting;\n  },\n  body: (sig, config) => {\n    // We can use sys colors to fit the current DevTools theme.\n    // Those are unfortunately only available on Chromium-based browsers.\n    // On Firefow we fall back to the default color\n    const color = 'var(--sys-color-primary)';\n    return ['div', {\n      style: `background: #FFFFFF10; padding-left: 4px; padding-top: 2px; padding-bottom: 2px;`\n    }, ['div', {\n      style: `color: ${color}`\n    }, 'Signal value: '], ['div', {\n      style: `padding-left: .5rem;`\n    }, ['object', {\n      object: sig(),\n      config\n    }]], ['div', {\n      style: `color: ${color}`\n    }, 'Signal function: '], ['div', {\n      style: `padding-left: .5rem;`\n    }, ['object', {\n      object: sig,\n      config: {\n        ...config,\n        skipFormatting: true\n      }\n    }]]];\n  }\n};\nfunction prettifyPreview(value) {\n  if (value === null) return 'null';\n  if (Array.isArray(value)) return `Array(${value.length})`;\n  if (value instanceof Element) return `<${value.tagName.toLowerCase()}>`;\n  if (value instanceof URL) return `URL`;\n  switch (typeof value) {\n    case 'undefined':\n      {\n        return 'undefined';\n      }\n    case 'function':\n      {\n        if ('prototype' in value) {\n          // This is what Chrome renders, can't use `object` though because it creates a nested expando arrow.\n          return 'class';\n        } else {\n          return '() => {…}';\n        }\n      }\n    case 'object':\n      {\n        if (value.constructor.name === 'Object') {\n          return '{…}';\n        } else {\n          return `${value.constructor.name} {}`;\n        }\n      }\n    default:\n      {\n        return ['object', {\n          object: value,\n          config: {\n            skipFormatting: true\n          }\n        }];\n      }\n  }\n}\nfunction isSignal(value) {\n  return value[SIGNAL] !== undefined;\n}\n/**\n * Installs the custom formatter into custom formatting on Signals in the devtools.\n *\n * Supported by both Chrome and Firefox.\n *\n * @see https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html\n */\nfunction installDevToolsSignalFormatter() {\n  globalThis.devtoolsFormatters ??= [];\n  if (!globalThis.devtoolsFormatters.some(f => f === formatter)) {\n    globalThis.devtoolsFormatters.push(formatter);\n  }\n}\nfunction createWatch(fn, schedule, allowSignalWrites) {\n  const node = Object.create(WATCH_NODE);\n  if (allowSignalWrites) {\n    node.consumerAllowSignalWrites = true;\n  }\n  node.fn = fn;\n  node.schedule = schedule;\n  const registerOnCleanup = cleanupFn => {\n    node.cleanupFn = cleanupFn;\n  };\n  function isWatchNodeDestroyed(node) {\n    return node.fn === null && node.schedule === null;\n  }\n  function destroyWatchNode(node) {\n    if (!isWatchNodeDestroyed(node)) {\n      consumerDestroy(node); // disconnect watcher from the reactive graph\n      node.cleanupFn();\n      // nullify references to the integration functions to mark node as destroyed\n      node.fn = null;\n      node.schedule = null;\n      node.cleanupFn = NOOP_CLEANUP_FN;\n    }\n  }\n  const run = () => {\n    if (node.fn === null) {\n      // trying to run a destroyed watch is noop\n      return;\n    }\n    if (isInNotificationPhase()) {\n      throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? 'Schedulers cannot synchronously execute watches while scheduling.' : '');\n    }\n    node.dirty = false;\n    if (node.version > 0 && !consumerPollProducersForChange(node)) {\n      return;\n    }\n    node.version++;\n    const prevConsumer = consumerBeforeComputation(node);\n    try {\n      node.cleanupFn();\n      node.cleanupFn = NOOP_CLEANUP_FN;\n      node.fn(registerOnCleanup);\n    } finally {\n      consumerAfterComputation(node, prevConsumer);\n    }\n  };\n  node.ref = {\n    notify: () => consumerMarkDirty(node),\n    run,\n    cleanup: () => node.cleanupFn(),\n    destroy: () => destroyWatchNode(node),\n    [SIGNAL]: node\n  };\n  return node.ref;\n}\nconst NOOP_CLEANUP_FN = () => {};\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst WATCH_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    consumerIsAlwaysLive: true,\n    consumerAllowSignalWrites: false,\n    consumerMarkedDirty: node => {\n      if (node.schedule !== null) {\n        node.schedule(node.ref);\n      }\n    },\n    cleanupFn: NOOP_CLEANUP_FN\n  };\n})();\n\n// We're using a top-level access to enable signal formatting whenever the signals package is loaded.\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  // tslint:disable-next-line: no-toplevel-property-access\n  /*#__PURE__*/installDevToolsSignalFormatter();\n}\nexport { REACTIVE_NODE, SIGNAL, consumerAfterComputation, consumerBeforeComputation, consumerDestroy, consumerMarkDirty, consumerPollProducersForChange, createWatch, installDevToolsSignalFormatter, isInNotificationPhase };\n//# sourceMappingURL=signals.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}